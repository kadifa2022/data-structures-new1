

Functional Interface was added with Java version 8.

--Functional Interface knows as SAM (single Abstract method)
--There is only one Abstract method in the interface
--can be added static and default methods
--Effectively acts as function
-- one abstract method we can use as different functions
--@FunctionalInterfaceannotation is applicable(Optional)

Build in functional interfaces :

Predicate:
         - Represent one function which takes one argument (any objects) and
         - returns boolean
         - has boolean method test(T t)
         -- removeIf() we can use for remove in collections

          List<Integer> list = new ArrayList<>();
                 list.addAll(Arrays.asList(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,1,2,2,3,3,4,5,6,6,7));

                 Predicate<Integer> isEven = p -> p % 2 == 0;

         //
         //            // can be this way to return true
         //            if (p % 2 == 0) {
         //                return true;
         //            } else {
         //                return false;
         //            }



               list.removeIf(isEven);// takes predicate
                 System.out.println(list);


 BiPredicate:
    --Represents a function which takes two arguments(any object) and returns boolean
    -- boolean test(T t, U u); abstract method


Function :
        --Represents a function which takes one argument(any object)
        --and return a value (any object)

        public interface Function<T, R>{  // R is return type any object
        R apply(T T);     // Abstract Method

BiFunction:
        -- Represent a function which takes two arguments (any object)
        -- return a value (any object)
        -- R apply(T t, U u); Abstract method



Consumer(void accept(T t) Abstract method)
        --represent a function which takes one argument(any object)
        --and does not return a value

BiConsumer:
        --  Takes two arguments(any object)and does not return a value
                  -- accept(): void accept (T t, U u); abstract method

Supplier


Lambda Expression
---A function with no name an identifier
---Can be defined in place where they are needed
---Expresses the instances of a functional Interface
---Can be assigned to the instance of functional interface

Syntax:
    ()-> {statement} : //if the abstract method does not have parameter   this syntax we can apply
                     Takes no argument and executes the
                      given statement(s) in lambda expression's body


    (parameters)-> {statements} :// if the abstract method has  parameters,  this syntax we apply
                    Takes argument(s) and executes the given
                    statements in lambda expression's body